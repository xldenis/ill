module Prelude
  data Maybe a = Just a | Nothing

  data List  a = Cons a (List a) | Nil

  data Tuple a b = T a b

  data Bool = True | False

  data Unit = Unit

  data Either a b = Left a | Right b

  trait Eq a
    eq  :: a -> a -> Bool
  end

  trait Show a
    show :: a -> String
  end

  trait Functor f
    fmap :: (a -> b) -> f a -> f b
  end

  trait Semigroup a
    plus :: a -> a -> a
  end

  trait MultSemigroup a
    times :: a -> a -> a
  end

  trait Semigroup a | Monoid a
    zero :: a
  end

  trait MultSemigroup a | MultMonoid a
    one :: a
  end

  trait Monoid a | Group a
    # Obeys the laws:
    # a - a = zero
    # (zero - a) + a = zero
    minus :: a -> a -> a
  end

  data Ordering = LE | GE | EQ

  trait Eq a | Ord a
    compare :: a -> a -> Ordering

    lt :: a -> a -> Bool
    gt :: a -> a -> Bool

    leq :: a -> a -> Bool
    geq :: a -> a -> Bool

    max :: a -> a -> a
    min :: a -> a -> a
  end

  trait Foldable t
    foldr :: (a -> b -> b) -> b -> t a -> b
    foldl :: (b -> a -> b) -> b -> t a -> b
  end

  trait Enum a
    succ :: a -> a
    pred :: a -> a

    toEnum :: Int -> a
    fromEnum :: a -> Int
  end

  trait Bounded a
    minBound :: a
    maxBound :: a
  end

  trait Functor f | Applicative f
    pure :: a -> f a
    ap :: f (a -> b) -> f a -> f b
  end

  trait Applicative m | Monad m
    bind :: m a -> (a -> m b) -> m b
  end

  trait Integral a
    div :: a -> a -> a
    mod :: a -> a -> a
  end

  impl Eq Int
    fn eq(a, b)
      eqInt(a, b) # primitive function
    end
  end


  impl Eq String
    fn eq(a, b)
      eqStr(a, b)
    end
  end

  impl Ord Int
    fn compare (a, b)
      if a < b then LE
      else if a > b then GE
      else EQ end
      end
    end

    fn lt (a, b) ltInt(a, b) end
    fn gt (a, b) gtInt(a, b) end
    fn leq (a, b) leqInt(a, b) end
    fn geq (a, b) geqInt(a, b) end
    fn max (a, b) if geqInt(a,b) then a else b end end
    fn min (a, b) if leqInt(a,b) then a else b end end
  end

  impl Integral Int
    fn div (a, b) divInt(a, b) end
    fn mod (a, b) modInt(a, b) end
  end

  impl Semigroup Int
    fn plus(a, b)
      plusInt(a, b) # primitive function
    end
  end

  impl MultSemigroup Int
    fn times(a, b)
      multInt(a, b)
    end
  end

  impl Semigroup String
    fn plus(a, b)
      plusStr(a, b) # primitive function
    end
  end

  impl Semigroup (Maybe a)
    fn plus(Just a, b)
      Just(a)
    or plus(Nothing, b)
      b
    end
  end

  impl Semigroup (List a)
    fn plus(Nil, x)
      x
    or plus(Cons x ls, Nil)
      Cons(x, ls)
    or plus(Cons x ls, ys)
      Cons(x, plus(ls, ys))
    end
  end

  impl Eq Bool
    fn eq(True, True)
      True
    or eq(False, False)
      True
    or eq(a, b)
      False
    end
  end

  impl Functor List
    fn fmap(f, Cons x xs)
      Cons(f(x), fmap(f, xs))
    or fmap(f, Nil)
      Nil
    end
  end

  impl Show a | Show (List a)
    fn show(list)
      "[" + foldr(plus, "", intersperse(", ", fmap(show, list))) + "]"
    end
  end

  impl Show Int
    fn show(a)
      showInt(a)
    end
  end

  impl Show Bool
    fn show(True)
      "True"
    or show(False)
      "False"
    end
  end

  impl Monoid Int
    fn zero ()
      0
    end
  end

  impl MultMonoid Int
    fn one ()
      1
    end
  end

  impl Group Int
    fn minus(a, b)
      minusInt(a, b)
    end
  end

  impl Show a | Show (Maybe a)
    fn show(Just a)
      "Just" + show(a)
    or show(Nothing)
      "nothing"
    end
  end

  impl Foldable List
    fn foldr(f, z, Cons x xs)
      f(x, foldr(f, z, xs))
    or foldr(f, z, Nil)
      z
    end

    fn foldl(f, z, Cons x xs)
      foldl(f, f(z, x), xs)
    or foldl(f, z, Nil)
      z
    end
  end

  impl Foldable Maybe
    fn foldr(f, z, Just x)
      f(x, z)
    or foldr(f, z, Nothing)
      z
    end

    fn foldl(f, z, Just x)
      f(z, x)
    or foldl(f, z, Nothing)
      z
    end
  end

  impl Functor (Either a)
    fn fmap(f, Right b)
      Right(f(b))
    or fmap(_, Left e)
      Left(e)
    end
  end

  impl Semigroup Bool
    # The additive semigroup for Bool is `or`
    fn plus(False, False)
      False
    or plus(_, _)
      True
    end
  end

  impl Monoid Bool
    fn zero ()
      False
    end
  end

  impl MultSemigroup Bool
    # The multiplicative semigroup for Bool is `and`
    fn times(True, True)
      True
    or times(_, _)
      False
    end
  end

  impl MultMonoid Bool
    fn one ()
      True
    end
  end

  # Commented out because it can't parse since `or` is a reserved keyword
  # or :: Bool -> Bool -> Bool
  # fn or(a, b)
  #   plus(a, b)
  # end

  and :: Bool -> Bool -> Bool
  fn and(a, b)
    times(a, b)
  end

  not :: Bool -> Bool
  fn not(True)
    False
  or not(False)
    True
  end

  intersperse :: a -> List a -> List a
  fn intersperse(item, Cons el Nil)
    Cons(el, Nil)
  or intersperse(item, Cons el l2)
    Cons(el, Cons(item, intersperse(item, l2)))
  or intersperse(item, Nil)
    Nil
  end

  head :: List a -> Maybe a
  fn head(Cons x xs)
    Just(x)
  or head(Nil)
    Nothing
  end

  last :: List a -> Maybe a
  fn last(Cons x xs)
    Just(x)
  or last(Nil)
    Nothing
  end

  tail :: List a -> Maybe (List a)
  fn tail(Cons x xs)
    Just(xs)
  or tail(Nil)
    Nothing
  end

  init :: List a -> Maybe (List a)
  fn init(Cons x Nil)
    Just(Nil)
  or init(Cons x xs)
    case init(xs) of
      when Just xs1: Just(Cons(x, xs1))
      when Nothing: Just(Cons(x, Nil))
    end
  or init(Nil)
    Nothing
  end

  uncons :: List a -> Maybe (Tuple a (List a))
  fn uncons(Cons x xs)
    Just(T(x, xs))
  or uncons(Nil)
    Nothing
  end

  const :: a -> (b -> a)
  fn const(e)
    fn (x) = e end
  end

  null :: Foldable t | t a -> Bool
  fn null ()
    foldr(const(const(False)), True)
  end

  length :: Foldable t | t a -> Int
  fn length(list)
    foldl(fn (x, y) = x + 1 end, 0, list)
  end

  zipWith :: (a -> b -> c) -> (List a) -> (List b) -> (List c)
  fn zipWith(f, Cons x xs, Cons y ys)
    Cons(f(x, y), zipWith(f, xs, ys))
  or zipWith(f, a, b)
    Nil
  end
end
