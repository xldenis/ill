module Prelude
  trait Eq a
    eq  :: a -> a -> Bool
  end

  trait Show a
    show :: a -> String
  end

  trait Functor f
    fmap :: (a -> b) -> f a -> f b
  end

  trait Semigroup a
    plus :: a -> a -> a
  end

  trait Semigroup a | Monoid a
    zero :: a
  end

  trait Monoid a | Group a
    # Obeys the laws:
    # a - a = zero
    # (zero - a) + a = zero
    minus :: a -> a -> a
  end

  trait Eq a | Ord a
    # compare :: a -> a -> Bool

    lt :: a -> a -> Bool
    gt :: a -> a -> Bool

    leq :: a -> a -> Bool
    geq :: a -> a -> Bool

    max :: a -> a -> a
    min :: a -> a -> a
  end

  data Maybe a = Just a | Nothing

  data List  a = Cons a (List a) | Nil

  data Tuple a b = T a b

  data Bool = True | False

  impl Eq Int
    fn eq()
      eqInt # primitive function
    end
  end

  impl Ord Int
    fn lt () ltInt end
    fn gt (a, b) gtInt(a, b) end
    fn leq () leqInt end
    fn geq () geqInt end
    fn max () maxInt end
    fn min () minInt end
  end

  impl Semigroup Int
    fn plus(a, b)
      plusInt(a, b) # primitive function
    end
  end

  impl Semigroup String
    fn plus(a, b)
      plusStr(a, b) # primitive function
    end
  end

  impl Semigroup (Maybe a)
    fn plus(Just a, b)
      Just(a)
    or plus(Nothing, b)
      b
    end
  end

  impl Semigroup (List a)
    fn plus(Nil, x)
      x
    or plus(Cons x ls, Nil)
      Cons(x, ls)
    or plus(Cons x ls, ys)
      Cons(x, plus(ls, ys))
    end
  end

  impl Eq Bool
    fn eq(True, True)
      True
    or eq(False, False)
      True
    or eq(a, b)
      False
    end
  end

  impl Functor List
    fn fmap(f, Cons x xs)
      Cons(f(x), fmap(f, xs))
    or fmap(f, Nil)
      Nil
    end
  end

  impl Show a | Show (List a)
    fn show(list)
      go = fn (x) =
        case x of
          when Cons el ls: case ls of
            when Nil: show(el)
            when ls: (show(el) + ',') + go(ls)
          end
          when Nil: ''
        end
      end

      '[' + go(list) + ']'
    end
  end

  impl Show Int
    fn show(a)
      showInt(a)
    end
  end

  impl Monoid Int
    fn zero ()
      0
    end
  end

  impl Group Int
    fn minus(a, b)
      minusInt(a, b)
    end
  end

  impl Show a | Show (Maybe a)
    fn show(Just a)
      show(a)
    or show(Nothing)
      'nothing'
    end
  end
end
