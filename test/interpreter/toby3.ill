module TobyBreaksThings3
  fn fib(i)
    partialIx(i, fibs)
  end

  fn fibs ()
    fromJust = fn (x) = case x of
      when Just x2: x2
      end
    end
    Cons(0, Cons(1, zipWith(plus, fibs, fromJust(tail(fibs)))))
  end

  fn partialIx(0, Cons x xs)
    x
  or partialIx(i, Cons x xs)
    partialIx(i - 1, xs)
  end

  make_range :: Int -> List Int -> List Int
  fn make_range(0, acc)
    acc
  or make_range(x, acc)
    make_range(x - 1, Cons(x, acc)) # issue is the inline constructor
  end

  range :: Int -> List Int
  fn range(x)
    make_range(x, Nil)
  end

  fn main()
    show(fmap(fib, range(250)))
  end
end
