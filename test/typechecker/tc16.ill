module TC16
  data List a = Cons a (List a) | Nil

  data Bool = T | F

  trait Show a
    show :: a -> String
  end

  impl Show a | Show (List a)
    fn show(Cons x xs)
      show(x)
    or show(Nil)
      ''
    end
  end

  impl Show Bool
    fn show(T)
      'T'
    or show(F)
      'F'
    end
  end

  trait Semigroup a
    g :: a -> a
  end

  impl Semigroup a
    fn g (x) x end
  end

  trait Ord a
    h :: a -> a
  end

  impl Ord a
    fn h (x) x end
  end

  fn x1 ()
    show
  end

  fn x2 (x)
    show(x)
  end

  # fn x3 ()
  #   show(Nil)
  # end

  fn x4 ()
    show(Cons(T, Nil))
  end

  x5 :: Show a | a -> String
  fn x5 (a)
    show(a)
  end

  x6 :: Show a | a -> String
  fn x6 ()
    show
  end

  fn length(Cons b xs)
    1 + length(xs)
  or length(Nil)
    0
  end

  fn y (x, y)
    length(x)

    if length(x) > 5 then
      Cons(show(x), Cons(show(y), Nil))
    else
      Cons(show(x), Nil)
    end
  end
end
